<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Planet HTCondor Meta Feed]]></title>
  <link href="http://htcondor.github.com/planet/atom.xml" rel="self"/>
  <link href="http://htcondor.github.com/"/>
  <updated>2014-04-07T03:31:14-07:00</updated>
  <id>http://htcondor.github.com/planet/atom.xml</id>
  <author>
    <name><![CDATA[HTCondor Project]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
    <entry>
      <title type="html"><![CDATA[Fitness data visualization with Apache Spark]]></title>
      <link href="http://chapeau.freevariable.com/2014/04/fitness-data-visualization-with-apache-spark.html"/>
      <updated>2014-04-02T04:55:41Z</updated>
      <id>tag:chapeau.freevariable.com,2014://1.45</id>
      <author>
        <name><![CDATA[Will Benton]]></name>
        <uri>http://willbenton.com</uri>
      </author>
      <content type="html"><![CDATA[
        <noscript><p>This post contains embedded maps; you&#8217;ll need to view it in a browser with JavaScript support in order to see them.</p></noscript>

<p>One problem that a lot of enthusiastic amateur cyclists encounter is how to make sense of all the workout telemetry data that their smartphone or cycle computer captures.  Most riders have some sense of how their cadence, heart rate, speed, road grade, and wattage come into play at any given moment in a ride as it&#8217;s happening, but answering questions about the bigger picture about how these fit together over time remains more difficult.  I&#8217;ve been experimenting with <a href="http://chapeau.freevariable.com/2013/12/a-simple-machine-learning-app-with-spark.html">cycling data analytics using Apache Spark for some time now</a>, but I thought I&#8217;d share some visualizations that I put together recently to answer a question that&#8217;s been nagging me as the weather warms up here in Wisconsin.</p>

<p>In my last post on using Spark to process fitness data, I presented a very simple visualization based on plotting the centers of clustered GPS traces.  By plotting darker center markers for denser clusters (and generating a large number of clusters), I was able to picture which roads and intersections I spent the most time riding on in the set of activities that I analyzed.  This time, however, I was more interested in a visualization that would tell me <em>what to do</em> rather than a visualization that would tell me <em>what I had already done</em>.</p>

<h3>Background</h3>

<p>One of the most useful tools for a cyclist who is interested in quantifying his or her performance and training is a direct-force power meter.  By measuring the actual force applied at some point on the bicycle drivetrain, these devices can accurately tell riders how many calories they&#8217;re burning in a ride, whether or not they&#8217;re &#8220;burning matches&#8221; (that is, using anaerobic metabolism instead of aerobic metabolism) at a given point in a race, how to pace long steady efforts to maximize performance, and precisely how hard to work in interval training in order to improve various kinds of fitness.  The last of these capabilities will be our focus in this post.</p>

<p>It&#8217;s obvious that there is a difference between ultra-endurance efforts and sprint efforts; no one would try to sprint for an entire 40km time trial (or run a marathon at their 100m pace), and it would be pointless to do sprint-duration efforts at the sort of pace one could maintain for a 12-hour race.  More generally, every athlete has a power-duration curve of the best efforts they could produce over time:  one&#8217;s best 5-second power might be double their best one-minute power and four times their best one-hour power, for example.  There are several points where this curve changes for most people, and these correspond to various physiological systems (for example, the shift from anaerobic to aerobic metabolism).  By targeting interval workouts to certain power zones, athletes can improve the corresponding physiological systems.</p>

<h3>Technique</h3>

<p>I began by clustering points from GPS traces, but instead of plotting the cluster centers, I plotted the convex hulls of all of the points in each cluster.  By giving me polygons containing every point from my data set, this gave me a pretty good picture of where I&#8217;d actually been.  I then calculated my mean power for three durations &#8212; corresponding roughly to anaerobic, VO2max, and just-above-aerobic efforts &#8212; at every point in each activity.  In other words, I mapped each point in each ride to the mean power I was about to produce in that ride.  Then, for each duration, I found the best efforts starting in each cluster and used these data to shade the convex hulls so that hulls where better &#8220;best efforts&#8221; originated would thus appear more saturated.</p>

<p>Because Spark is expressive and can work interactively, it was straightforward to experiment with various techniques and constant factors to make the most sense of these data.  Debugging is straightforward; since I stick to effect-free code as much as possible, I can test my logic without running it under Spark.  Furthermore, Spark is fast enough to make trying a bunch of different options completely painless, even on my desktop computer.</p>

<h3>Results</h3>

<p>I&#8217;m including here three plots of cluster hulls, shaded by the best mean power I achieved starting in that cluster for one minute (green), three minutes (blue), and ten minutes (red). With these visualizations (and with increasingly friendly road cycling weather here in Wisconsin), I can decide where to go to do interval workouts based on where I&#8217;ve had my best efforts in the past.  The data tell me that if I want to work on my one-minute power, I should focus on the Timber Lane climb up from Midtown; if I want to work on my three-minute power, it&#8217;s either Barlow Road or the east side of Indian Lake; and if I want to work on my ten-minute power, it&#8217;s off to Mounds Park Road <a href="http://www.usacycling.org/road-races-kick-off-2013-amateur-para-cycling-road-nationals.htm">for the same climb that made everyone suffer in the national championship road race</a> last year.</p>

<p>(Click and drag or zoom to inspect any map; if one is missing polygons, drag and they should render.)</p>

<script src="https://embed.github.com/view/geojson/willb/sur-la-plaque/examples-20140104/examples/slp60.json"></script>

<script src="https://embed.github.com/view/geojson/willb/sur-la-plaque/examples-20140104/examples/slp180.json"></script>

<script src="https://embed.github.com/view/geojson/willb/sur-la-plaque/examples-20140104/examples/slp600.json"></script>

<h3>Future work</h3>

<p>I have many ideas for where to take this work next and have some implementation in progress that is producing good results but not (yet) perspicuous visualizations.  However, even the more mundane things on my to-do list are pretty interesting:  among other things, I&#8217;d like to do some performance evaluation and see just how much cycling data we could feasibly process on a standard workstation or small cluster (my code is currently unoptimized); to add a web-based front end allowing more interactive analysis; and to improve my (currently very simple) computational geometry and power-analysis code to make better use of Spark&#8217;s abstractions and distributed execution.  (<a href="https://github.com/willb/sur-la-plaque/">The code itself</a>, of course, is available under the Apache license and I welcome your feedback or pull requests.)</p>

<p>I love tools that make it easy to sketch solutions to hard problems interactively (indeed, I spent a lot of time in graduate school developing an <a href="http://web.willbenton.com/software/dimple">interactive tool for designing program analyses</a> &#8212; although in general it&#8217;s more fun to think about bicycling problems than whether or not two references alias one another), and Spark is one of the most impressive interactive environments I&#8217;ve seen for solving big problems.  I&#8217;m looking forward to prototyping and refining more tools for understanding cycling training and performance in the future.</p>

        

    ]]></content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Submitting jobs to HTCondor using Python]]></title>
      <link href="http://osgtech.blogspot.com/2014/03/submitting-jobs-to-htcondor-using-python.html"/>
      <updated>2014-03-19T20:32:00Z</updated>
      <id>tag:blogger.com,1999:blog-8803173202887660937.post-689352737761121268</id>
      <author>
        <name><![CDATA[Brian Bockelman]]></name>
        <uri>http://osgtech.blogspot.com</uri>
      </author>
      <content type="html"><![CDATA[<div class="tr_bq">I've had several requests to for a tutorial on using the HTCondor python bindings; current documentation resources for these include:</div><br /><ul><li><a href="http://research.cs.wisc.edu/htcondor/HTCondorWeek2013/presentations/Bockelman_Python.pdf">My presentation at the 2013 HTCondor week</a>.</li><li><a href="http://research.cs.wisc.edu/htcondor/manual/v8.1/6_7Python_Bindings.html">The HTCondor manual page</a>.</li><li>Python's built-in help() facility.</li><li>The HTCondor users mail list.</li></ul><br />However, more examples are always useful! &nbsp;This blog entry will attempt to cover the most common use cases - ClassAds, querying HTCondor, and submitting jobs.<br /><br /><h1>Why Python Bindings?</h1>Before we launch into the <i>how</i>, let's examine the <i>why</i>. &nbsp;The python bindings provide a developer-friendly mechanism for interacting with HTCondor. &nbsp;A few highlights:<br /><br /><ul><li>They call the HTCondor libraries directly, avoiding a fork/exec of a subprocess.</li><li>They provide a "pythonic" interaction with HTCondor; the design is meant to be familiar to a python programmer. &nbsp;Errors raise python exceptions.</li><li>They have thorough integration with ClassAds. &nbsp;Because they use the HTCondor implementation of ClassAds, the result is a very complete implementation of the ClassAd language. &nbsp;ClassAd expressions can be created cleanly without worrying about string quoting issues.</li><li>Most actions that can be performed through the HTCondor command-line tools are exposed via python.</li></ul><br /><br />The bindings themselves are compiled against the system version of python and a specific version of HTCondor. &nbsp;This limits the portability (you cannot reliably email compiled binaries to others), meaning they are most effective when they are installed onto the system by the sysadmin; that said, they are shipped with all HTCondor versions supported by UW except for Windows.<br /><br /><h1>Loading the modules</h1>The bindings are split into two python modules, <b>htcondor</b>&nbsp;and <b>classad</b>. &nbsp;To verify your environment is setup correctly, do the following in python:<br /><blockquote class="tr_bq"><div class="p1"><span style="font-family: Courier New, Courier, monospace;">$ python</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">Python 2.7.5 (default, Aug 25 2013, 00:04:04)&nbsp;</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">[GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">Type "help", "copyright", "credits" or "license" for more information.</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; import classad</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; import htcondor</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt;&nbsp;</span></div></blockquote>If no exception is thrown, you are ready to proceed to the next section! &nbsp;If an exception is thrown, check your HTCondor installation and the value of the <b>PYTHONPATH</b> environment variable if you are using a non-root install.<br /><br /><h1>Begin with the Basics: ClassAds</h1><a href="http://research.cs.wisc.edu/htcondor/classad/">ClassAds are the lingua franca of HTCondor</a>, and hence the basic essential data structure of the python bindings. &nbsp;Each ad is formed as a set of key-value pairs, where the value is a ClassAd expression (such as <b>2 + 2</b>). &nbsp;This differs from a JSON map, where the value must be a literal (<b>4</b>). &nbsp;When evaluating expressions, one can reference other attributes in the ClassAd.<br /><br />Consider the following ClassAd interaction:<br /><blockquote class="tr_bq"><div class="p1"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; ad = ClassAd()</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; ad['foo'] = 1</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; ad['bar'] = 2</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; ad['baz'] = ExprTree("foo + bar")</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; ad</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">[ baz = foo + bar; bar = 2; foo = 1 ]</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; ad['baz']</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">foo + bar</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; ad['baz'].eval()</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">3L</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt;&nbsp;</span></div></blockquote>We first create an empty ClassAd, then do some value assignments in a manner similar to a Python dictionary. &nbsp;For the <b>baz</b>&nbsp;attribute, we create a new ExprTree (a ClassAd expression) object. &nbsp;The string given to the ExprTree constructor is parsed as a new python expression.<br /><br />Note that if we reference <b>baz</b>, the expression itself is returned; if we instead referenced <b>foo</b>, the python object 1 would be returned. &nbsp;The <b>classad</b>&nbsp;library will coerce references to python objects if possible; if not possible, it will return ExprTrees. &nbsp;To <i>force</i>&nbsp;the return of an ExprTree, use the <b>lookup</b>&nbsp;method of the ClassAd; to force the return of a python object, use the <b>eval</b>&nbsp;method.<br /><br />In 8.1.3, HTCondor introduced more convenient ways to build expressions. &nbsp;We could replace <b>ExprTree("foo + bar")</b> above with:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">Attribute("foo") + Attribute("bar")</span></blockquote>&nbsp;We believe that explicitly forming expressions in this manner is less likely to result in quoting issues (analogous to how one avoids SQL injection attacks).<br /><br />ClassAd expressions include the most common programming operators, lists, sub-ClassAds, attribute references, function calls, strings, numbers, and booleans. &nbsp;See the full language description for a thorough treatment.<br /><br /><h1>Querying HTCondor</h1>The two most common daemons to query in HTCondor are the collector (which holds descriptions for all daemons running in the pool) and the schedd (which maintains the job queue).<br /><br />We'll start with the collector. &nbsp;Begin by creating a <b>Collector</b> object:<br /><blockquote class="tr_bq"><div class="p1"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; coll = Collector()</span></div></blockquote>The collector object will default to the collector daemon in the machine's configuration; alternately, the constructor accepts a hostname as a string argument.<br /><br />Once created, you can use the <b>query</b>&nbsp;method to get ClassAds from the collector:<br /><blockquote class="tr_bq"><div class="p1"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; ads = coll.query(htcondor.AdTypes.Startd)</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">len(ads)</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; len(ads)</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">4128</span></div></blockquote>This returns a Python list of ClassAds. &nbsp;By default all attributes for all ClassAds of a given type are returned by <b>query</b>; returning such a large amount of data can take a long amount of time. &nbsp;Further function arguments refine the amount of data returned:<br /><blockquote class="tr_bq"><div class="p1"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; ads = coll.query(htcondor.AdTypes.Startd, 'Machine =?= "red-d9n1.unl.edu"', ["Name", "RemoteOwner"])&nbsp;</span></div><div class="p2"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; len(ads)</span></div><div class="p2"><span style="font-family: Courier New, Courier, monospace;">15</span></div><div class="p2"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; ads[0]</span></div><div class="p2"><span style="font-family: Courier New, Courier, monospace;">[ Name = "slot1@red-d9n1.unl.edu"; MyType = "Machine"; TargetType = "Job"; CurrentTime = time() ]</span></div></blockquote>&nbsp;The second argument provides a ClassAd expression which serves as a filter; the third argument is a list of attributes to include. &nbsp;Note that the collector may add some default attributes and may not return a requested attribute if it is not present in the ad.<br /><br />The creation of a Schedd object can be done in a manner similar to the Collector for a local schedd:<br /><br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; schedd = htcondor.Schedd()</span></blockquote>Alternately, you can use the Collector's&nbsp;<b>locate</b> method to find a remote Schedd address:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; addr = coll.locate(htcondor.DaemonTypes.Schedd, "schedd.example.com")<br />&gt;&gt;&gt; schedd = htcondor.Schedd(addr)</span></blockquote><br /><div class="p1">Once the schedd object is created, the <b>query</b>&nbsp;method is used to list jobs:</div><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; jobs = schedd.query()<br />&gt;&gt;&gt; len(jobs)<br />2096</span></blockquote><div class="p1"></div><div class="p1">Again, additional arguments allow you to trim the number of ads and the number of attributes returned:</div><blockquote class="tr_bq"><div class="p1"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; jobs = schedd.query('Owner=?="cmsprod088"', ["ClusterId", "JobStatus"])</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; len(jobs)</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">336</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; jobs[0]</span></div><div class="p1"><span style="font-family: Courier New, Courier, monospace;">[ MyType = "Job"; JobStatus = 2; TargetType = "Machine"; ServerTime = 1395254896; CurrentTime = time(); ClusterId = 2940860 ]</span></div></blockquote>Starting in 8.1.5, the <b>xquery</b>&nbsp;method has been added. &nbsp;Instead of buffering all ads in memory in the form of a python list,&nbsp;&nbsp;<b>xquery</b>&nbsp;returns an iterator; reading through the iterator will block as ClassAds are returned by the schedd. &nbsp;This reduces total memory usage and allows the user to interleave several queries at once.<br /><br /><div class="p1"></div><h1>Submitting Jobs</h1><div class="p1">Submitting jobs is one of the more confusing aspects of the Python bindings for beginners. &nbsp;This is because job descriptions must be provided as a ClassAd instead of HTCondor submit file format. &nbsp;The submit file format is a macro substitution language evaluated at submit time.</div><div class="p1"><br /></div><div class="p1">For example, consider the following submit file:</div><blockquote class="tr_bq"><blockquote class="tr_bq"><span style="font-family: 'Courier New', Courier, monospace;">executable = test.sh</span><span style="font-family: Courier New, Courier, monospace;">arguments = foo bar&nbsp;</span><br /><span style="font-family: 'Courier New', Courier, monospace;">log = test.log</span><br /><span style="font-family: 'Courier New', Courier, monospace;">output = test.out.$(Process)</span><br /><span style="font-family: 'Courier New', Courier, monospace;">error = test.err</span><br /><span style="font-family: 'Courier New', Courier, monospace;">transfer_output_files = output</span><br /><span style="font-family: 'Courier New', Courier, monospace;">should_transfer_files = yes</span><br /><span style="font-family: 'Courier New', Courier, monospace;">queue 1</span></blockquote></blockquote>The equivalent submit ClassAd is:<br /><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">[<br />&nbsp; &nbsp;&nbsp;Cmd = "test.sh";<br />&nbsp; &nbsp;&nbsp;Arguments = "foo bar"<br />&nbsp; &nbsp;&nbsp;UserLog = "test.log";<br />&nbsp; &nbsp;&nbsp;Out = strcat("test.out",ProcId);<br />&nbsp; &nbsp; Err = "test.err";<br />&nbsp; &nbsp; TransferOutput = "output";<br />&nbsp; &nbsp;&nbsp;ShouldTransferFiles = "YES";<br />]</span></blockquote><br /><div class="p1">A few items of note for converting submit files to ClassAds:</div><div class="p1"></div><ul><li>The translation from the submit file commands to ClassAd attributes often results in different attribute names (<b>executable</b>&nbsp;corresponds to <b>Cmd</b>). &nbsp;An extensive, but not exhaustive, list of attribute is available in <a href="http://research.cs.wisc.edu/htcondor/manual/v8.1/12_Appendix_A.html">the HTCondor manual</a>.</li><li>Some submit file commands result in multiple attribute changes in the ClassAd. &nbsp;If you are unsure how a submit file command maps to a ClassAd, you can run <b>condor_submit -dump /dev/null test.submit</b>&nbsp;to have HTCondor dump the resulting ClassAd to stdout. &nbsp;This command includes <i>all</i>&nbsp;attributes, including ones that are auto-filled; do not copy the entire ad, but look just for the changes.</li><li>Submit file commands do not have a type and the quoting rules differs for different commands; you must properly quote strings in the ClassAd using the ClassAd language rules.</li><li>Macro substitution is not available by ClassAds. &nbsp;Notice how&nbsp;<span style="font-family: 'Courier New', Courier, monospace;">test.out.$(Process)</span>&nbsp;in the submit file is&nbsp;<span style="font-family: 'Courier New', Courier, monospace;">strcat("test.out",ProcId)</span>&nbsp;in the ClassAd; the latter is evaluated at runtime.</li></ul><div>Once you have your ClassAd prepared, submitting it is straightforward:</div><div><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; schedd = htcondor.Schedd()<br />&gt;&gt;&gt; schedd.submit(ad)<br />23498</span></blockquote><div class="p1">The return value is the Cluster ID. &nbsp;To submit multiple jobs in the same job cluster, you can pass a second argument to submit. &nbsp;For example, to submit 5 jobs:</div><blockquote class="tr_bq"><span style="font-family: Courier New, Courier, monospace;">&gt;&gt;&gt; schedd.submit(ad, 5)<br />23499</span></blockquote><br /><div class="p1"></div><h1>Parting Thoughts</h1><div class="p1">In this entry, we covered the basics of using the HTCondor python bindings. &nbsp;We covered only about 10% of the API; left untouched were advanced ClassAd topics, manipulating jobs, remote submission, and managing running daemons.</div><div class="p1"><br /></div><div class="p1">I hope to have a few more entries to cover other aspects of the API. &nbsp;Have a particular request? &nbsp;Leave a comment!</div></div><br /><div class="p1"></div>]]></content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Moving from a Globus to an HTCondor Compute Element]]></title>
      <link href="http://derekweitzel.blogspot.com/2014/02/moving-from-globus-to-htcondor-compute.html"/>
      <updated>2014-02-27T23:05:00Z</updated>
      <id>tag:blogger.com,1999:blog-3007054864987759910.post-7950648301232917905</id>
      <author>
        <name><![CDATA[Derek Weitzel]]></name>
        <uri>http://derekweitzel.blogspot.com</uri>
      </author>
      <content type="html"><![CDATA[]]></content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[ HTCondor 8.1.4 released! ( February 27, 2014 )]]></title>
      <link href="manual/v8.1.4/10_3Development_Release.html"/>
      <updated>2014-02-27T06:00:00Z</updated>
      <id></id>
      <author>
        <name><![CDATA[HTCondor Team]]></name>
        <uri>http://research.cs.wisc.edu/htcondor</uri>
      </author>
      <content type="html"><![CDATA[The HTCondor Team is pleased to announce the release of HTCondor version 8.1.4.
This development release contains all the bug fixes from the stable release version 8.0.6.
Major new features include:
added grid universe support for Google Compute Engine;
support for defining custom resources that easily manage GPUs;
a new tool that does GPU discovery;
improved scalability when using the shared port service;
Python 3 support;
enhanced resilience due to the prompt detection of network failures.
A complete list of bugs fixed and features can be found in the
Version History.
HTCondor 8.1.4 binaries and source code are available from our
Downloads page.
]]></content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[A Bi-directional Variation of the O(NP) Edit Distance Algorithm]]></title>
      <link href="http://erikerlandson.github.com/blog/2014/02/20/a-bi-directional-variation-of-the-o-np-edit-distance-algorithm/"/>
      <updated>2014-02-21T02:51:00Z</updated>
      <id>http://erikerlandson.github.com/blog/2014/02/20/a-bi-directional-variation-of-the-o-np-edit-distance-algorithm</id>
      <author>
        <name><![CDATA[Erik Erlandson]]></name>
        <uri>http://erikerlandson.github.com/</uri>
      </author>
      <content type="html"><![CDATA[<p>The O(ND) edit distance algorithm <a href="#ref1">[1]</a> is a standard for efficient computation of the edit distance between two sequences, appearing in applications such as the GNU diff tool.  There is also a variation <a href="#ref2">[2]</a> that operates in O(NP) time, where P is the number of deletions in the shortest edit path.  This O(NP) algorithm has a lower computational cost, since P &lt;= D/2 (and may be &lt;&lt; D/2 in some circumstances) <a href="#ref3">[3]</a>.  In order to apply these algorithms to obtain an <em>edit script</em> in linear space, they must be adapted into a bidirectional form that enables recursive divide-and-conquer.   The basic principles of a bidirectional adaptation of the O(ND) algorithm are described in <a href="#ref1">[1]</a>.   However, no such discussion of a bidirectional O(NP) algorithm is provided in <a href="#ref2">[2]</a>.  Understanding this adaptation involves some observations that aren't immediately obvious.  In this post, I will describe these key observations. [...]</p>
]]></content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[sbt is in Fedora 20]]></title>
      <link href="http://chapeau.freevariable.com/2014/02/sbt-is-in-fedora-20.html"/>
      <updated>2014-02-20T22:27:57Z</updated>
      <id>tag:chapeau.freevariable.com,2014://1.44</id>
      <author>
        <name><![CDATA[Will Benton]]></name>
        <uri>http://willbenton.com</uri>
      </author>
      <content type="html"><![CDATA[Longtime Chapeau readers may recall last summer’s lament about the state of the Scala ecosystem in Fedora. We’ve taken a lot of steps since then. After a rough patch for the Fedora Scala package, Scala 2.10 is available and works...]]></content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[ Consider presenting your work at HTCondor Week 2014 ( February 20, 2014 )]]></title>
      <link href="http://research.cs.wisc.edu/htcondor/HTCondorWeek2014/speaker_info.html"/>
      <updated>2014-02-20T06:00:00Z</updated>
      <id></id>
      <author>
        <name><![CDATA[HTCondor Team]]></name>
        <uri>http://research.cs.wisc.edu/htcondor</uri>
      </author>
      <content type="html"><![CDATA[HTCondor Week attendees are interested in hearing about your efforts during
our annual meeting, April 28-30.
Please consider presenting.
Details for adding your talk to the schedule are given in this page of
Information for HTCondor Week Speakers.
]]></content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[One weird trick to eviscerate open source licenses]]></title>
      <link href="http://chapeau.freevariable.com/2014/02/one-weird-trick-to-eviscerate-open-source-licenses.html"/>
      <updated>2014-02-19T17:26:28Z</updated>
      <id>tag:chapeau.freevariable.com,2014://1.43</id>
      <author>
        <name><![CDATA[Will Benton]]></name>
        <uri>http://willbenton.com</uri>
      </author>
      <content type="html"><![CDATA[The GNU project’s Four Freedoms present the essential components of Free software: freedom to use the program for any purpose, freedom to study and change the program’s source code, freedom to redistribute the author’s version of the code, and freedom...]]></content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Hot Rod Hadoop with Tachyon on Fedora 21 (Rawhide)]]></title>
      <link href="http://timothysc.github.com/blog/2014/02/17/bdas-tachyon/"/>
      <updated>2014-02-17T16:00:00Z</updated>
      <id>http://timothysc.github.com/blog/2014/02/17/bdas-tachyon</id>
      <author>
        <name><![CDATA[Timothy St. Clair]]></name>
        <uri>http://timothysc.github.com/</uri>
      </author>
      <content type="html"><![CDATA[<p><img class="left" src="http://timothysc.github.com/images/Tachyon.jpg" title="" > [...]</p>
]]></content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[ HTCondor 8.0.6 released! ( February 11, 2014 )]]></title>
      <link href="manual/v8.0.6/10_3Stable_Release.html"/>
      <updated>2014-02-11T06:00:00Z</updated>
      <id></id>
      <author>
        <name><![CDATA[HTCondor Team]]></name>
        <uri>http://research.cs.wisc.edu/htcondor</uri>
      </author>
      <content type="html"><![CDATA[The HTCondor team is pleased to announce the release of HTCondor 8.0.6.
This new version contains a port of HTCondor for Red Hat Enterprise Linux 7.0 Beta on the x86_64 architecture that includes support for the standard universe.
It also contains bug fixes for:
transferring files larger then 4 GiB on Windows and 32-bit platforms;
using a minimum of 1024-bit keys on proxy certificates generated by HTCondor;
accepting DAG input files larger then 2 GiB;
the Windows MSI installer setting up a proper configuration for the VM universe;
honoring CPU affinity on Windows platforms;
issues with a failing condor_schedd daemon, when HTCondor is compiled with gcc 4.8+, the default compiler on recent Fedora releases.
A complete list of bugs fixed can be found in the
Version History.
HTCondor 8.0.6 binaries and source code are available from our
Downloads page.
]]></content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[ HTCondor Week 2014 Announced: April 28-30 (January 10, 2014)]]></title>
      <link href="http://research.cs.wisc.edu/htcondor/HTCondorWeek2014/index.html"/>
      <updated>2014-01-10T06:00:00Z</updated>
      <id></id>
      <author>
        <name><![CDATA[HTCondor Team]]></name>
        <uri>http://research.cs.wisc.edu/htcondor</uri>
      </author>
      <content type="html"><![CDATA[
HTCondor Week 2014, our annual HTCondor user conference, is
scheduled for April 28-April 30, 2014.  We will again host
HTCondor Week at the Wisconsin Institutes for Discovery in
beautiful Madison, Wisconsin.

In a change from previous years, technical talks will begin on
Monday.  See the web site for current details.

At HTCondor Week, you can look forward to:


Technical talks on usage and deployment from developers and
  your fellow users
Talks and tutorials on new HTCondor features
Talks on future plans for HTCondor
Introductory tutorials on using and administrating HTCondor
The opportunity to meet with HTCondor developers and other users

	Information on registration and scheduling will be available soon.
]]></content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[ HTCondor 8.1.3 released! ( December 23, 2013 )]]></title>
      <link href="manual/v8.1.3/10_3Development_Release.html"/>
      <updated>2013-12-23T06:00:00Z</updated>
      <id></id>
      <author>
        <name><![CDATA[HTCondor Team]]></name>
        <uri>http://research.cs.wisc.edu/htcondor</uri>
      </author>
      <content type="html"><![CDATA[The HTCondor Team is pleased to announce the release of HTCondor version 8.1.3.
This development release contains all the bug fixes from the stable release version 8.0.5.
Major new features include:
the parsing of configuration has changed such that comments are permitted within multi-line definitions;
the condor_sos tool helps administrators manage overloaded daemons by causing commands to be handled with a higher priority;
a new Python binding reads event logs.
A complete list of bugs fixed and features can be found in the 
Version History.
HTCondor 8.1.3 binaries and source code are available from our
Downloads page.
]]></content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[A simple machine learning app with Spark]]></title>
      <link href="http://chapeau.freevariable.com/2013/12/a-simple-machine-learning-app-with-spark.html"/>
      <updated>2013-12-04T13:47:26Z</updated>
      <id>tag:chapeau.freevariable.com,2013://1.42</id>
      <author>
        <name><![CDATA[Will Benton]]></name>
        <uri>http://willbenton.com</uri>
      </author>
      <content type="html"><![CDATA[I'm currently on my way back from the first-ever Spark Summit, where I presented a talk on some of my work with the Fedora Big Data SIG to package Apache Spark and its infrastructure for Fedora. (My slides are online,...]]></content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Apache Thrift in Fedora]]></title>
      <link href="http://chapeau.freevariable.com/2013/10/apache-thrift-in-fedora.html"/>
      <updated>2013-10-16T19:58:16Z</updated>
      <id>tag:chapeau.freevariable.com,2013://1.41</id>
      <author>
        <name><![CDATA[Will Benton]]></name>
        <uri>http://willbenton.com</uri>
      </author>
      <content type="html"><![CDATA[You probably already know that Apache Thrift is a framework for developing distributed services and clients to access these in multiple languages. You probably also knew that Thrift is extremely popular among the sorts of cool projects that those of...]]></content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Bootstrapping your MapReduce 2.X programming on Fedora 20]]></title>
      <link href="http://timothysc.github.com/blog/2013/09/14/hadoop-mapreduce/"/>
      <updated>2013-09-14T15:00:00Z</updated>
      <id>http://timothysc.github.com/blog/2013/09/14/hadoop-mapreduce</id>
      <author>
        <name><![CDATA[Timothy St. Clair]]></name>
        <uri>http://timothysc.github.com/</uri>
      </author>
      <content type="html"><![CDATA[<p><img src="http://timothysc.github.com/images/ElephantCowboy.jpg" alt="Picture Courtesy of Mauro Flores jr"/> [...]</p>
]]></content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Creating a native Mac Installer for Bosco]]></title>
      <link href="http://derekweitzel.blogspot.com/2013/07/creating-native-mac-installer-for-bosco.html"/>
      <updated>2013-07-11T20:34:00Z</updated>
      <id>tag:blogger.com,1999:blog-3007054864987759910.post-9151105712164146929</id>
      <author>
        <name><![CDATA[Derek Weitzel]]></name>
        <uri>http://derekweitzel.blogspot.com</uri>
      </author>
      <content type="html"><![CDATA[]]></content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Leveraging systemd cgroup integration to provide SLAs on Fedora 18 & 19]]></title>
      <link href="http://timothysc.github.com/blog/2013/06/14/systemd-cgroup-sla/"/>
      <updated>2013-06-14T15:00:00Z</updated>
      <id>http://timothysc.github.com/blog/2013/06/14/systemd-cgroup-sla</id>
      <author>
        <name><![CDATA[Timothy St. Clair]]></name>
        <uri>http://timothysc.github.com/</uri>
      </author>
      <content type="html"><![CDATA[<h2>Background</h2> [...]
]]></content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Submitting R jobs with Bosco]]></title>
      <link href="http://derekweitzel.blogspot.com/2013/05/submitting-r-jobs-with-bosco.html"/>
      <updated>2013-05-20T14:51:00Z</updated>
      <id>tag:blogger.com,1999:blog-3007054864987759910.post-9067247722276578550</id>
      <author>
        <name><![CDATA[Derek Weitzel]]></name>
        <uri>http://derekweitzel.blogspot.com</uri>
      </author>
      <content type="html"><![CDATA[]]></content>
    </entry>
  
    <entry>
      <title type="html"><![CDATA[Configuring a Personal Hadoop Development Environment on Fedora 18]]></title>
      <link href="http://timothysc.github.com/blog/2013/04/22/personalhadoop/"/>
      <updated>2013-04-22T15:00:00Z</updated>
      <id>http://timothysc.github.com/blog/2013/04/22/personalhadoop</id>
      <author>
        <name><![CDATA[Timothy St. Clair]]></name>
        <uri>http://timothysc.github.com/</uri>
      </author>
      <content type="html"><![CDATA[<h2>Background</h2> [...]
]]></content>
    </entry>
  
</feed>
